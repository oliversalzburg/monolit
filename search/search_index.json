{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MonoLit \u00b6 Execute, dynamically.","title":"MonoLit"},{"location":"#monolit","text":"Execute, dynamically.","title":"MonoLit"},{"location":"Overview/","text":"About \u00b6 This extension tries to solve debug/launch configuration and task duplication when working in multi-project environments, like monorepos or multi-folder workspaces, in VS Code. The core approach is to execute launch configurations and tasks in dynamically selected working directories. Instead of redefining the same launch configurations over and over, define them once generically and let MonoLit handle the rest. Usage \u00b6 To get started, invoke the monolit.ignite command. You should be guided from there. The documentation below is outdated. Invoke the monolit.start command to get started. MonoLit presents a list of \"monolit-able\" launch configurations. A launch configuration becomes monolit-able if any of the following are true: The cwd of the configuration contains a * . The program of the configuration contains a * . The name starts with MonoLit: . The highlighted portion shows the name of the configuration. Next to it is the name of the workspace this configuration was found in. On the second line you see the preLaunchTask set in the configuration, if any. MonoLit will then check the cwd in the configuration and expand the glob pattern therein. For example, your cwd is configured as: \"cwd\" : \"${workspaceFolder}/packages/*\" It will then look for matches in all open workspace folders and present the findings, for you to select a target for this launch. MonoLit will then launch your configuration in the newly selected working directory. If your program in the configuration also contains the same path as your cwd , that part is also replaced by the new cwd , so the correct program is launched. Example \u00b6 Let's assume you have an existing launch configuration for a specific project: { \"type\" : \"node\" , \"request\" : \"launch\" , \"name\" : \"Launch Web Worker\" , \"preLaunchTask\" : \"yarn.build\" , \"program\" : \"${workspaceFolder}/packages/app-web/source/main.ts\" , \"runtimeArgs\" : [ \"\u2026\" ], \"cwd\" : \"${workspaceFolder}/packages/app-web\" } As you expand your monorepo, you may start to duplicate this configuration, either in the root or in individual projects. Rewrite this configuration to be generic, so you can use it with MonoLit, like so: { \"type\" : \"node\" , \"request\" : \"launch\" , \"name\" : \"Launch\" , \"preLaunchTask\" : \"yarn.build\" , \"program\" : \"${workspaceFolder}/packages/app-*/source/main.ts\" , \"runtimeArgs\" : [ \"\u2026\" ], \"cwd\" : \"${workspaceFolder}/packages/app-*\" } Now when you launch monolit.start , the same configuration can be used for every project matching ${workspaceFolder}/packages/app-* . Pre-Launch Tasks \u00b6 MonoLit's dynamic adjustment of pre-launch tasks is a key feature that should not be overlooked. By executing a targetted build approach in the cwd of the target project, one can ensure only the required source files are built for this launch. This can be as simple as executing yarn.build in the task. For example: { \"label\" : \"yarn.build\" , \"type\" : \"shell\" , \"command\" : [ \"yarn\" , \"build\" ], \"problemMatcher\" : [ \"$tsc\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true } } Additionally, by configuring a rebuild command ( monolit.tasks.rebuild ) in your settings, you can use the monolit.cleanStart command to have that task executed as the pre-launch task of the started configuration. This enables workflows with a fast default build (change detection, incremental, ...) and a slower full rebuild. Workflows \u00b6 monolit.start F5 Start a new session. workbench.action.debug.restart Ctrl + Shift + F5 Restart the session without running the pre-launch task. monolit.restart Shift + F5 Restart the session and run the pre-launch task. monolit.cleanStart Ctrl + F5 Restart the session and run the rebuild task.","title":"Overview"},{"location":"Overview/#about","text":"This extension tries to solve debug/launch configuration and task duplication when working in multi-project environments, like monorepos or multi-folder workspaces, in VS Code. The core approach is to execute launch configurations and tasks in dynamically selected working directories. Instead of redefining the same launch configurations over and over, define them once generically and let MonoLit handle the rest.","title":"About"},{"location":"Overview/#usage","text":"To get started, invoke the monolit.ignite command. You should be guided from there. The documentation below is outdated. Invoke the monolit.start command to get started. MonoLit presents a list of \"monolit-able\" launch configurations. A launch configuration becomes monolit-able if any of the following are true: The cwd of the configuration contains a * . The program of the configuration contains a * . The name starts with MonoLit: . The highlighted portion shows the name of the configuration. Next to it is the name of the workspace this configuration was found in. On the second line you see the preLaunchTask set in the configuration, if any. MonoLit will then check the cwd in the configuration and expand the glob pattern therein. For example, your cwd is configured as: \"cwd\" : \"${workspaceFolder}/packages/*\" It will then look for matches in all open workspace folders and present the findings, for you to select a target for this launch. MonoLit will then launch your configuration in the newly selected working directory. If your program in the configuration also contains the same path as your cwd , that part is also replaced by the new cwd , so the correct program is launched.","title":"Usage"},{"location":"Overview/#example","text":"Let's assume you have an existing launch configuration for a specific project: { \"type\" : \"node\" , \"request\" : \"launch\" , \"name\" : \"Launch Web Worker\" , \"preLaunchTask\" : \"yarn.build\" , \"program\" : \"${workspaceFolder}/packages/app-web/source/main.ts\" , \"runtimeArgs\" : [ \"\u2026\" ], \"cwd\" : \"${workspaceFolder}/packages/app-web\" } As you expand your monorepo, you may start to duplicate this configuration, either in the root or in individual projects. Rewrite this configuration to be generic, so you can use it with MonoLit, like so: { \"type\" : \"node\" , \"request\" : \"launch\" , \"name\" : \"Launch\" , \"preLaunchTask\" : \"yarn.build\" , \"program\" : \"${workspaceFolder}/packages/app-*/source/main.ts\" , \"runtimeArgs\" : [ \"\u2026\" ], \"cwd\" : \"${workspaceFolder}/packages/app-*\" } Now when you launch monolit.start , the same configuration can be used for every project matching ${workspaceFolder}/packages/app-* .","title":"Example"},{"location":"Overview/#pre-launch-tasks","text":"MonoLit's dynamic adjustment of pre-launch tasks is a key feature that should not be overlooked. By executing a targetted build approach in the cwd of the target project, one can ensure only the required source files are built for this launch. This can be as simple as executing yarn.build in the task. For example: { \"label\" : \"yarn.build\" , \"type\" : \"shell\" , \"command\" : [ \"yarn\" , \"build\" ], \"problemMatcher\" : [ \"$tsc\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true } } Additionally, by configuring a rebuild command ( monolit.tasks.rebuild ) in your settings, you can use the monolit.cleanStart command to have that task executed as the pre-launch task of the started configuration. This enables workflows with a fast default build (change detection, incremental, ...) and a slower full rebuild.","title":"Pre-Launch Tasks"},{"location":"Overview/#workflows","text":"monolit.start F5 Start a new session. workbench.action.debug.restart Ctrl + Shift + F5 Restart the session without running the pre-launch task. monolit.restart Shift + F5 Restart the session and run the pre-launch task. monolit.cleanStart Ctrl + F5 Restart the session and run the rebuild task.","title":"Workflows"},{"location":"reference/Releases/","text":"Releases \u00b6 To build a publishable package: yarn extension:package To puild a new patch release and package: yarn extension:package:patch Upload package manually at https://marketplace.visualstudio.com , vsce publish doesn't work well with yarn.","title":"Releases"},{"location":"reference/Releases/#releases","text":"To build a publishable package: yarn extension:package To puild a new patch release and package: yarn extension:package:patch Upload package manually at https://marketplace.visualstudio.com , vsce publish doesn't work well with yarn.","title":"Releases"},{"location":"reference/Repository%20Scripts/","text":"Full reference \u00b6 docs:build \u00b6 Project: @monolit/documentation Source: .scripts/build.sh Description: Build the MonoLit documentation website. docs:scripts:build \u00b6 Project: root Source: nsd --docs-location \"packages/documentation/docs/reference/Repository Scripts/\" Description: Build the node-scripts-docs you're reading right now. docs:scripts:check \u00b6 Project: root Source: nsd --docs-location \"packages/documentation/docs/reference/Repository Scripts/\" --check-only Description: Check if there are any changes to the node-scripts-docs documentation. docs:serve \u00b6 Project: @monolit/documentation Source: .scripts/serve.sh Description: Run an HTTP server that serves, and continuously updates the documentation site. extension:clean \u00b6 Project: monolit Source: rm -rf dist Description: Delete all build output of the extension. extension:compile \u00b6 Project: monolit Source: webpack --mode development Description: Compile a development build of the extension. extension:package \u00b6 Project: monolit Source: run vsce package --yarn Description: documentation pending extension:package:patch \u00b6 Project: monolit Source: npm version patch && run vsce package --yarn Description: documentation pending extension:publish \u00b6 Project: monolit Source: run vsce publish --yarn Description: documentation pending extension:watch \u00b6 Project: monolit Source: webpack --mode development --watch Description: Build the extension in watch mode. lint:eslint \u00b6 Project: root Source: eslint packages --ext .ts Description: Run ESLint on the TypeScript sources. lint:tsc \u00b6 Project: root Source: tsc --noEmit Description: Run the TypeScript compiler on the TypeScript sources to check for errors. typecheck:all \u00b6 Project: root Source: tsc --noEmit --incremental false Description: Type-check all projects, to fill the problems panel in VS Code. vscode:prepublish \u00b6 Project: monolit Source: webpack --mode production Description: Pre-publish hook from vsce . Compile the extension in production mode.","title":"Full reference"},{"location":"reference/Repository%20Scripts/#full-reference","text":"","title":"Full reference"},{"location":"reference/Repository%20Scripts/#docsbuild","text":"Project: @monolit/documentation Source: .scripts/build.sh Description: Build the MonoLit documentation website.","title":"docs:build"},{"location":"reference/Repository%20Scripts/#docsscriptsbuild","text":"Project: root Source: nsd --docs-location \"packages/documentation/docs/reference/Repository Scripts/\" Description: Build the node-scripts-docs you're reading right now.","title":"docs:scripts:build"},{"location":"reference/Repository%20Scripts/#docsscriptscheck","text":"Project: root Source: nsd --docs-location \"packages/documentation/docs/reference/Repository Scripts/\" --check-only Description: Check if there are any changes to the node-scripts-docs documentation.","title":"docs:scripts:check"},{"location":"reference/Repository%20Scripts/#docsserve","text":"Project: @monolit/documentation Source: .scripts/serve.sh Description: Run an HTTP server that serves, and continuously updates the documentation site.","title":"docs:serve"},{"location":"reference/Repository%20Scripts/#extensionclean","text":"Project: monolit Source: rm -rf dist Description: Delete all build output of the extension.","title":"extension:clean"},{"location":"reference/Repository%20Scripts/#extensioncompile","text":"Project: monolit Source: webpack --mode development Description: Compile a development build of the extension.","title":"extension:compile"},{"location":"reference/Repository%20Scripts/#extensionpackage","text":"Project: monolit Source: run vsce package --yarn Description: documentation pending","title":"extension:package"},{"location":"reference/Repository%20Scripts/#extensionpackagepatch","text":"Project: monolit Source: npm version patch && run vsce package --yarn Description: documentation pending","title":"extension:package:patch"},{"location":"reference/Repository%20Scripts/#extensionpublish","text":"Project: monolit Source: run vsce publish --yarn Description: documentation pending","title":"extension:publish"},{"location":"reference/Repository%20Scripts/#extensionwatch","text":"Project: monolit Source: webpack --mode development --watch Description: Build the extension in watch mode.","title":"extension:watch"},{"location":"reference/Repository%20Scripts/#linteslint","text":"Project: root Source: eslint packages --ext .ts Description: Run ESLint on the TypeScript sources.","title":"lint:eslint"},{"location":"reference/Repository%20Scripts/#linttsc","text":"Project: root Source: tsc --noEmit Description: Run the TypeScript compiler on the TypeScript sources to check for errors.","title":"lint:tsc"},{"location":"reference/Repository%20Scripts/#typecheckall","text":"Project: root Source: tsc --noEmit --incremental false Description: Type-check all projects, to fill the problems panel in VS Code.","title":"typecheck:all"},{"location":"reference/Repository%20Scripts/#vscodeprepublish","text":"Project: monolit Source: webpack --mode production Description: Pre-publish hook from vsce . Compile the extension in production mode.","title":"vscode:prepublish"}]}